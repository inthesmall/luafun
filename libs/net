
requires={
  "core",
  "fileIO",
  "logs"
}
listen=nil
--Main thread for incoming network connections
--Params:
--
--Returns:
--

worker=nil
--Deals with recieved messages
--params:
--received. This is the packet recieved by listen
--Returns:
--

send=nil
--Send packets to remote machines
--params:
--to: recipient ID
--protocol: message, command, log or logArray
--data: Message to send


listen=function()
  print("Listening for message")
  modem=core.getPeripheral("modem")
  if not modem.isOpen(1) then
   	modem.open(1)
  end
  while true do
    --event, modemSide, senderChannel, replyChannel, message, senderDistance  
    received = {os.pullEvent("modem_message")}
    table.insert(worklist,received)
  end
end

worker=function()
  id=os.getComputerID()
  while true
    job=worklist[1]
    table.remove(worklist,1)  
    mesg=job[5]
    if mesg[1]==id then
      if mesg[3]=="message" then

      elseif mesg[3]=="command" then

      elseif mesg[3]=="log" then
        logMesg=mesg[4]
        log.add(logMesg[1],logMesg[2])
      elseif mesg[3]=="logArray" then
        logArr=mesg[4]
        log.addArray(logArr[1],logArr[2],logArr[3])
      end
    end
  
end
  
send=function(to, protocol,data)
  if not modem.isOpen(1) then
    modem.open(1)
  end
  id=os.getComputerID()
  modem.transmit(1,1,{to,id,protocol,data})
  
end

main=function()
  worklist={}
  os.loadAPI("libs/i")
  i.importList(requires)
end


main()

