FILE(ID:21,10,computer/glass,{--HamezOS--,--VARIABLES--,,local color = \{,  ["red"] = 0xFF0000\,,  ["green"] = 0x00FF00\,,  ["blue"] = 0x0000FF\,,  ["white"] = 0xFFFFFF\,,  ["black"] = 0x000000,\},,local validCommand = \{,  ["MSG"] = true\, --Send a message to glasses,  ["TC"] = true\,  --Specify the text color,  ["BC"] = true\,  --Specify the background color,  ["BA"] = true   --Specify the background alpha,\},,local sendChannel = 1,local receiveChannel = 2,local messageTimeout = 15,local maxMessagesOnScreen = 10,,local version = "[Version not avalible]",local out = nil,local modem = nil,,local messages = \{\},local toBeDeleted = \{\},local messageDelay = 0.02 * messageTimeout,,--FUNCTIONS--,main = nil,,send = nil,recieve = nil,,printMessages = nil,deleteOldMessages = nil,parseMessage = nil,,getPeripheral = nil,getTime = nil,getVersion = nil,,addText = nil,addBox = nil,clear = nil,sync = nil,,main = function\(\),  out = getPeripheral\("openperipheral_bridge"\),  modem = getPeripheral\("modem"\),  getVersion\(\),  if not \(out and modem\) then return end,  print\("Found glass and modem"\),  ,  modem.open\(receiveChannel\),  ,  while true do,    clear\(\),    addBox\(5\, 5\, 70\, 25\, color["white"]\, 0.2\),    addText\(8\, 8\, "HamezOS v"..version\, color["white"]\),    addText\(8\, 20\, "Time: "..getTime\(\)\),    ,    printMessages\(\),    ,    sync\(\),    sleep\(0.1\),  end,  ,  modem.closeAll\(\),end,,parseMessage = function\(str\),  local toks = \{\},  --0: Constructing Token,  --1: Building string,  --2: Building text color,  --3: Building background color,  local c = "",  local token = "",  local mode = 0,  for i = 1\, #str do,    local c = string.sub\(str\, i\, i\),    if mode == 0 then,      if c == ":" then,        if validCommand[token] then,          mode = 1,          table.insert\(toks\, token\),        end,        token = "",      else,        token = token..c,      end,    elseif mode == 1 then,      if c == ";" then,        table.insert\(toks\, token\),        token = "",        mode = 0,      else,        token = token..c,      end,    end,  end,  ,  local message = "ERROR: Message not found",  local time = getTime\(\),  local textColor = color["red"],  local backColor = color["black"],  local backAlpha = 0.2,  ,  for i = 1\, \(#toks - 1\) do,    if toks[i] == "MSG" then message = toks[i + 1] end,    if toks[i] == "TC" then textColor = tonumber\(toks[i + 1]\) end,    if toks[i] == "BC" then backColor = tonumber\(toks[i + 1]\) end,    if toks[i] == "BA" then backAlpha = tonumber\(toks[i + 1]\) end,  end,  return \{message\, time\, textColor\, backColor\, backAlpha\},end,,printMessages = function\(\),  if not messages then return end,  deleteOldMessages\(\),  ,  local numMessages = #messages,  local lowerBound = 0,  if numMessages >= maxMessagesOnScreen then lowerBound = numMessages - \(maxMessagesOnScreen - 1\) else lowerBound = 1 end,  for i = lowerBound\, numMessages do,    addBox\(6\, 38 + \(i - \(lowerBound - 1\)\) * 12\, 70 + #\(messages[i][5]\) * 6\, 12\, messages[i][8]\, messages[i][9]\),    addText\(8\, 40 + \(i - \(lowerBound - 1\)\) * 12\, i.."\) "..messages[i][6]\, messages[i][7]\),    addText\(70\, 40 + \(i - \(lowerBound - 1\)\) * 12\, messages[i][5]\, messages[i][7]\),  end,end,,deleteOldMessages = function\(\),  toBeDeleted = \{\},  for i = 1\, #messages do,    if messages[i][1] < os.time\(\) - messageDelay then,      table.insert\(toBeDeleted\, i\),    end,  end,  for i = 1\, #toBeDeleted do,    table.remove\(messages\, toBeDeleted[i]\),  end,end,,receive = function\(\),  while true do,    local e = \{os.pullEvent\("modem_message"\)\},    e[1] = os.time\(\),    local m = parseMessage\(e[5]\),    for i = 1\, #m do,      e[4 + i] = m[i],    end,    table.insert\(messages\, e\),    print\("Message: "..e[5]\),  end,end,,send = function\(str\),  print\("Sent \("..sendChannel.."\): "..str\),  modem.transmit\(sendChannel\, receiveChannel\, str\),end,,getTime = function\(\),  return textutils.formatTime\(os.time\(\)\, false\),end,,getVersion = function\(\),  if not fs.exists\("version.txt"\) then return false end,  local f = fs.open\("version.txt"\, "r"\),  version = f.readLine\(\),  f.close\(\),  return true,end,,getPeripheral = function\(str\),  for _\, side in ipairs\(rs.getSides\(\)\) do,    if peripheral.getType\(side\) == str then,      return peripheral.wrap\(side\),    end,  end,  print\("Couldn't find peripheral: "..str\),  return nil,end,,addText = function\(x\, y\, str\, c\),  out.addText\(x + 1\, y + 1\, str\, color["black"]\),  out.addText\(x\, y\, str\, c\),end,,addBox = function\(x\, y\, width\, height\, c\, alpha\),  out.addBox\(x\, y\, width\, height\, c\, alpha\),end,,clear = function\(\),  out.clear\(\),end,,sync = function\(\),  out.sync\(\),end,,parallel.waitForAll\(receive\, main\)})FILE(ID:21,10,//startup,{--HamezOS Startup--,,--[[,Startup has two jobs:,1\) Update everything in system to the latest version,2\) Start the kernal,]]--,,--Variables--,--Function Declarations--,main = nil,,run = nil,,--Functions--,main = function\(\),  if \(not fs.exists\("system/kernal"\)\) then,    print\("Kernal not found"\),    if fs.exists\("disk/system/kernal"\) then,      print\("Obtaining from disk"\),      fs.copy\("disk/system/kernal"\, "system/kernal"\),    else return end,  end,  if true then return end,  run\("system/kernal"\),end,,run = function\(path\),  if not fs.exists\(path\) then print\("File: '"..path.."' doesn't exist\, please re-install HamezOS"\),  else,    if shell.run\(path\) then return true,    else print\("File: '"..path.."' exists but is unable to be executed"\) end,  end,  return false,end,,main\(\)})FILE(ID:21,10,libs/wireless,{--HamezOS Wireless--,--[[,Wireless contains functions to allow for communication between computers,,REQUIRED IMPORTS:,getModem\(\),,send - sends a message over the wireless network,receive - recieves messages from the wireless network,parse - parses an input recieved from recieve\(\),getToks - takes arguments off the stack,sanatize - puts '\' infront of dangerous characters,,]]--,,send = function\(modem\, to\, command\, arguments\),  local myID = os.getComputerID\(\),  local sendMessage = "NIL\("..to.."\,"..myID.."\)EOC",  ,  if arguments ~= "" then,    sendMessage = command.."\("..to.."\,"..myID.."\,"..arguments.."\)EOC",  else,    sendMessage = command.."\("..to.."\,"..myID.."\)EOC",  end,  modem.transmit\(1\, 1\, sendMessage\),end,,receive = function\(validCommands\),  print\("Receiving Commands"\),  while true do,    local e = \{os.pullEvent\("modem_message"\)\},    print\("RECIEVED COMMAND: "..e[5]\),    parse\(validCommands\, e[5]\),  end,  print\("No Longer Receiving"\),end,,sanatize = function\(charBlacklist\, str\),  local strLen = #str,  local newStr = "",  for i = 1\, strLen do,    local c = string.sub\(str\, i\, i\),    if charBlacklist[c] == true then,      newStr = newStr.."\\"..c,    else,      newStr = newStr..c,    end,  end,  return newStr,end,,getToks = function\(stack\, items\),  local ret = \{\},  for i = 1\, items do,    local token = table.remove\(stack\, 1\),    table.insert\(ret\, token\),  end,  return ret,end,,parse = function\(validCommands\, input\),  local state = 0,  local c = "",  local token = "",  local stack = \{\},  local arrayStack = \{\},  local charImmunity = false,  local inputLen = #input,  ,  for i = 1\, inputLen + 1 do,    c = string.sub\(input\, i\, i\),    if charImmunity == true then ,      token = token..c,      charImmunity = false,    elseif c == "\\" then,      charImmunity = true,    elseif state == 0 then,      if c == "\(" then,        if token ~= "" then,          table.insert\(stack\, token\),          token = "",        end,        state = 1,      elseif c ~= " " then token = token..c end,    elseif state == 1 then,      if c == "\)" then,        if token ~= "" then,          table.insert\(stack\, token\),          table.insert\(stack\, "EOC"\),          token = "",        end,        state = 0,      elseif c == "\{" then,        state = 2,      elseif c == "\," then,        table.insert\(stack\, token\),        token = "",      else token = token..c end,    elseif state == 2 then,      if c == "\}" then,        if token ~= "" then,          table.insert\(arrayStack\, token\),          token = "",        end,        table.insert\(stack\, arrayStack\),        arrayStack = \{\},        state = 1,      elseif c == "\," then,        if token ~= "" then,          table.insert\(arrayStack\, token\),          token = "",        end,      else token = token..c end,    end,  end,  ,  while #stack > 0 do,    local token = table.remove\(stack\, 1\),    local func = validCommands[token],    local toInput = table.remove\(stack\, 1\),    local forMe = false,    ,    if string.sub\(toInput\, 1\, 3\) == "ID:" then,      if os.getComputerID\(\) == tonumber\(string.sub\(toInput\, 4\, #toInput\)\) then forMe = true end,    elseif string.sub\(toInput\, 1\, 6\) == "LABEL:" then,      if myLabel == string.sub\(toInput\, 7\, #toInput\) then forMe = true end,    elseif string.sub\(toInput\, 1\, 3\) == "ALL" then forMe = true end,    local from = table.remove\(stack\, 1\),    ,    if forMe then,      if func then,        print\("RUNNING FUNCTION: '"..token.."'"\),        func\(from\, stack\),      else print\("INVALID COMMAND: '"..token.."'"\) end,    else print\("RECIEVED COMMAND NOT FOR ME: "..toInput\) end,    ,    local stop = false,    repeat,      if #stack <= 0 then,        stop = true,      else,        token = table.remove\(stack\, 1\),        if token == "EOC" then stop = true end,      end,    until stop,  end,end})DONE_UPDATE(ID:21,10)