--HamezOS hostUpdate--

--[[
hostUpdate has only one job:
1) Return the up to date version of a requested file/all files
]]--

--Variables--
local out = term
local modem = nil
local blockCommunications = true

local printDebug = true

local myID = (-1)
local myLabel = ""

local isHost = false
local isRunning = true

local sendChannel = 1
local receiveChannel = 1

local version = "[N/A]"
local versionPath = "local/system/version.txt"

--Commands are structured as such: '[[COMMAND](ALL/ID:[ID]/LABEL:[LABEL],[MY_ID],[ARGS...])'
validCommands = {
  ["UPDATE"] = nil
}

importedFunctions = {}

charBlacklist = {}

files = {}

pathBlacklist = {
  ["system"] = true,
  ["local"] = true,
  ["disk"] = true,
  ["openp"] = true,
  ["rom"] = true
}

--Functions--

init = function()
  send = import("libs/wireless", "send")
  receive = import("libs/wireless", "receive")
  getToks = import("libs/wireless", "getToks")
  sanatize = import("libs/wireless", "sanatize")
  parse = import("system/parser", "parse")
end

main = function()
  init()
  
  myID = os.getComputerID()
  myLabel = os.getComputerLabel()
  
  getModem()
  getVersion()
  getCharBlacklist()
  
  if myID ~= getHostID() then
    print("This computer is not a valid host machine")
    return false
  end
  
  if not modem then return false end
  modem.open(1)
  
  updateDir("/")
  receive(validCommands)
end

updateDir = function(path)
  local FileList = fs.list(path)
  
  for _, file in pairs(FileList) do
    if not pathBlacklist[file] then
      if fs.isDir(file) then updateDir(file)
      else addToMemory(path.."/"..file) end
    end
  end
end

validCommands["UPDATE"] = function(from, stack)
  print("REQUEST TO UPDATE FROM ID: "..from)
  local str = ""
  for path, contents in pairs(files) do
    str = str.."FILE(ID:"..from..","..myID..","..path..","..contents..")"
  end
  str = str.."DONE_UPDATE(ID:"..from..","..myID..")"
  if fs.exists("local/logs/updateLog.txt") then fs.delete("local/logs/updateLog.txt") end
  local log = fs.open("local/logs/updateLog.txt", "w")
  log.write(str)
  log.close()
  
  modem.transmit(sendChannel, receiveChannel, str)
end

addToMemory = function(path)
  print("Adding to memory: "..path)
  local contents = readFile(path)
  local numLines = #contents
  local str = ""
  for i = 1, numLines do
    str = str..sanatize(charBlacklist, contents[i])
    if i ~= numLines then str = str.."," end
  end
  files[path] = "{"..str.."}"
end







readLineFromFile = function(path)
  local contents = readFile(path)
  if (not contents) or contents == {} then return "[N/A]" end
  return contents[1]
end

readFile = function(path)
  if not fs.exists(path) then return nil end
  
  local contents = {}
  local f = fs.open(path, "r")
  local line = ""
  repeat
    line = f.readLine()
    if line then table.insert(contents, line) end
  until not line
  f.close()
  return contents
end

getModem = function()
  modem = getPeripheral("modem")
  if not modem then
    print("No modem found, Not updating")
    return false
  else return true end
end

getHostID = function()
  local contents = readFile("system/hostID.txt")
  if (not contents) or contents == {} then return (-1) end
  return tonumber(contents[1])
end

getVersion = function()
  local contents = readFile(versionPath)
  if (not contents) or contents == {} then return false end
  version = contents[1]
  return true
end

getCharBlacklist = function()
  charBlacklist = {}
  local contents = readFile("system/charBlacklist.txt")
  if (not contents) then return false end
  for i = 1, #contents do
    if contents[i] ~= "" then charBlacklist[contents[i]] = true end
  end
  return true
end

getPeripheral = function(str)
  for _, side in ipairs(rs.getSides()) do
    if peripheral.getType(side) == str then
      return peripheral.wrap(side)
    end
  end
  print("Couldn't find peripheral: "..str)
  return nil
end

isTurtle = function()
  if turtle then return true else return false end
end

debug = function(str)
  if printDebug then print(str) end
end

import = function(path, functionName)
  if importedFunctions[functionName] then
    print("Function: '"..functionName.."' is already imported")
    return nil
  elseif not fs.exists(path) then
    print("Import: '"..path.."' doesn't exist")
    return nil
  end
  local f = fs.open(path, "r")
  local functionString = nil
  local searchString = functionName.." = function("
  local searchLen = #searchString
  local line = ""
  repeat
    line = f.readLine()
    if line then
      if not functionString then
        if string.sub(line, 1, searchLen) == searchString then functionString = "" end
      end
      if functionString then
        functionString = functionString..line.."\n"
        if string.sub(line, 1, 3) == "end" then break end
      end
    end
  until not line
  f.close()
  if not functionString then
    print("No function: '"..functionName.."' in file: '"..path.."'")
    return nil
  end
  importedFunctions[functionName] = true
  return loadstring(functionString)()
end
main()
