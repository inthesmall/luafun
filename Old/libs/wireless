--HamezOS Wireless--
--[[
Wireless contains functions to allow for communication between computers

REQUIRED IMPORTS:
getModem()

send - sends a message over the wireless network
receive - recieves messages from the wireless network
parse - parses an input recieved from recieve()
getToks - takes arguments off the stack
sanatize - puts '\' infront of dangerous characters

]]--

send = function(modem, to, command, arguments)
  local myID = os.getComputerID()
  local sendMessage = "NIL("..to..","..myID..")EOC"
  
  if arguments ~= "" then
    sendMessage = command.."("..to..","..myID..","..arguments..")EOC"
  else
    sendMessage = command.."("..to..","..myID..")EOC"
  end
  modem.transmit(1, 1, sendMessage)
end

receive = function(validCommands)
  print("Receiving Commands")
  while true do
    local e = {os.pullEvent("modem_message")}
    print("RECIEVED COMMAND: "..e[5])
    parse(validCommands, e[5])
  end
  print("No Longer Receiving")
end

sanatize = function(charBlacklist, str)
  local strLen = #str
  local newStr = ""
  for i = 1, strLen do
    local c = string.sub(str, i, i)
    if charBlacklist[c] == true then
      newStr = newStr.."\\"..c
    else
      newStr = newStr..c
    end
  end
  return newStr
end

getToks = function(stack, items)
  local ret = {}
  for i = 1, items do
    local token = table.remove(stack, 1)
    table.insert(ret, token)
  end
  return ret
end

parse = function(validCommands, input)
  local state = 0
  local c = ""
  local token = ""
  local stack = {}
  local arrayStack = {}
  local charImmunity = false
  local inputLen = #input
  
  for i = 1, inputLen + 1 do
    c = string.sub(input, i, i)
    if charImmunity == true then 
      token = token..c
      charImmunity = false
    elseif c == "\\" then
      charImmunity = true
    elseif state == 0 then
      if c == "(" then
        if token ~= "" then
          table.insert(stack, token)
          token = ""
        end
        state = 1
      elseif c ~= " " then token = token..c end
    elseif state == 1 then
      if c == ")" then
        if token ~= "" then
          table.insert(stack, token)
          table.insert(stack, "EOC")
          token = ""
        end
        state = 0
      elseif c == "{" then
        state = 2
      elseif c == "," then
        table.insert(stack, token)
        token = ""
      else token = token..c end
    elseif state == 2 then
      if c == "}" then
        if token ~= "" then
          table.insert(arrayStack, token)
          token = ""
        end
        table.insert(stack, arrayStack)
        arrayStack = {}
        state = 1
      elseif c == "," then
        if token ~= "" then
          table.insert(arrayStack, token)
          token = ""
        end
      else token = token..c end
    end
  end
  
  while #stack > 0 do
    local token = table.remove(stack, 1)
    local func = validCommands[token]
    local toInput = table.remove(stack, 1)
    local forMe = false
    
    if string.sub(toInput, 1, 3) == "ID:" then
      if os.getComputerID() == tonumber(string.sub(toInput, 4, #toInput)) then forMe = true end
    elseif string.sub(toInput, 1, 6) == "LABEL:" then
      if myLabel == string.sub(toInput, 7, #toInput) then forMe = true end
    elseif string.sub(toInput, 1, 3) == "ALL" then forMe = true end
    local from = table.remove(stack, 1)
    
    if forMe then
      if func then
        print("RUNNING FUNCTION: '"..token.."'")
        func(from, stack)
      else print("INVALID COMMAND: '"..token.."'") end
    else print("RECIEVED COMMAND NOT FOR ME: "..toInput) end
    
    local stop = false
    repeat
      if #stack <= 0 then
        stop = true
      else
        token = table.remove(stack, 1)
        if token == "EOC" then stop = true end
      end
    until stop
  end
end